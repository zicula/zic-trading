//@version=5
// Enhanced Fibonacci Retracement Strategy with Limit Orders and Market Status Detection
// v37.1 - Fixed syntax errors and improved Market Status Detection
strategy("Zic Fibonacci Retracement Strategy v37.1 - Limit Order & Market Status - Fixed - 2025.01.06", overlay=true,
         max_lines_count=500, max_labels_count=500, max_bars_back=5000,
         initial_capital=1000,
         commission_type=strategy.commission.percent,
         commission_value=0.045)

// ==================== ORIGINAL INPUTS ====================
lookback = input.int(50, title="Lookback Period for Fibonacci", minval=1)
fib_level_1_val = input.float(0.618, title="Fib Level 1 Value", step=0.001)
fib_level_2_val = input.float(0.650, title="Fib Level 2 Value", step=0.001)
fib_level_3_val = input.float(0.786, title="Fib Level 3 Value", step=0.001)
fib_level_4_val = input.float(0.887, title="Fib Level 4 Value", step=0.001)

use_fib_level_1 = input.bool(true, title="Use Fib Level 1")
use_fib_level_2 = input.bool(true, title="Use Fib Level 2")
use_fib_level_3 = input.bool(true, title="Use Fib Level 3")
use_fib_level_4 = input.bool(true, title="Use Fib Level 4")

tp_percent = input.float(0.03, title="Take Profit Percentage", minval=0.001, step=0.001)
sl_percent = input.float(0.03, title="Stop Loss Percentage", minval=0.001, step=0.001)

use_pips_tp_sl = input.bool(false, title="Use Pips for TP/SL")
tp_pips = input.int(100, title="Take Profit Pips", minval=1)
sl_pips = input.int(100, title="Stop Loss Pips", minval=1)

leverage = input.int(1, title="Leverage", minval=1, maxval=125)
show_markers = input.bool(true, title="Show TP/SL Markers")
show_fib_labels = input.bool(true, title="Show Fibonacci High/Low Labels")

paint_hl_lines = input.bool(true, title="Paint High/Low Lines for Fib Period")
hl_line_color = input.color(color.new(color.gray, 85), title="High/Low Line Color")
hl_line_style_str = input.string("Dashed", title="High/Low Line Style", options=["Solid", "Dotted", "Dashed"])

// ==================== NEW LIMIT ORDER INPUTS ====================
g_limit = "═══ Limit Order Settings ═══"
use_limit_orders = input.bool(false, title="Use Limit Orders", group=g_limit)
limit_offset_percent = input.float(0.0005, title="Limit Order Offset %", minval=0.0, maxval=0.01, step=0.0001, group=g_limit)

// ==================== NEW MARKET STATUS INPUTS ====================
g_market = "═══ Market Status Detection ═══"
use_market_status = input.bool(true, title="Calculate from Status Market", group=g_market)
market_tf = input.timeframe("240", title="Market Status Timeframe", group=g_market)

// Individual trend controls
allow_long_uptrend = input.bool(true, title="Allow Long in Uptrend", group=g_market)
allow_short_downtrend = input.bool(true, title="Allow Short in Downtrend", group=g_market)
allow_trades_sideways = input.bool(false, title="Allow Trades in Sideways", group=g_market)

// Market status detection parameters
adx_length = input.int(14, title="ADX Length", minval=5, maxval=50, group=g_market)
adx_trend_threshold = input.float(25, title="ADX Trend Threshold", minval=15, maxval=40, step=1, group=g_market)
ma_fast = input.int(20, title="Fast MA for Status", minval=5, maxval=50, group=g_market)
ma_medium = input.int(50, title="Medium MA for Status", minval=20, maxval=100, group=g_market)
ma_slow = input.int(200, title="Slow MA for Status", minval=100, maxval=300, group=g_market)
bb_length = input.int(20, title="BB Length for Sideways", minval=10, maxval=50, group=g_market)
bb_mult = input.float(2.0, title="BB Multiplier", minval=1.0, maxval=3.0, step=0.1, group=g_market)
atr_mult_sideways = input.float(1.5, title="ATR Multiplier for Sideways", minval=0.5, maxval=3.0, step=0.1, group=g_market)

// ==================== ORIGINAL WIN RATE ENHANCEMENT INPUTS ====================
g1 = "═══ Trend Filter ═══"
use_trend_filter = input.bool(true, title="Use Trend Filter", group=g1)
trend_ma_length = input.int(21, title="Trend MA Length", minval=5, maxval=200, group=g1)
trend_ma_type = input.string("EMA", title="Trend MA Type", options=["SMA", "EMA", "WMA"], group=g1)

g2 = "═══ Momentum Filter ═══"
use_rsi_filter = input.bool(true, title="Use RSI Filter", group=g2)
rsi_length = input.int(14, title="RSI Length", minval=5, maxval=50, group=g2)
rsi_oversold = input.int(30, title="RSI Oversold Level", minval=20, maxval=40, group=g2)
rsi_overbought = input.int(70, title="RSI Overbought Level", minval=60, maxval=80, group=g2)

g3 = "═══ Volume Filter ═══"
use_volume_filter = input.bool(false, title="Use Volume Filter", group=g3)
volume_ma_length = input.int(20, title="Volume MA Length", minval=5, maxval=50, group=g3)
volume_multiplier = input.float(1.2, title="Volume Multiplier", minval=1.0, maxval=3.0, step=0.1, group=g3)

g4 = "═══ Volatility Filter ═══"
use_atr_filter = input.bool(true, title="Use ATR Volatility Filter", group=g4)
atr_length = input.int(14, title="ATR Length", minval=5, maxval=50, group=g4)
min_atr_multiplier = input.float(1.0, title="Min ATR Multiplier", minval=0.5, maxval=3.0, step=0.1, group=g4)

g5 = "═══ Support/Resistance Filter ═══"
use_sr_filter = input.bool(true, title="Use Support/Resistance Filter", group=g5)
sr_lookback = input.int(20, title="S/R Lookback Period", minval=10, maxval=100, group=g5)
sr_threshold = input.float(0.001, title="S/R Threshold (%)", minval=0.0001, maxval=0.01, step=0.0001, group=g5)

g6 = "═══ Multi-Timeframe Confirmation ═══"
use_htf_filter = input.bool(false, title="Use Higher Timeframe Filter", group=g6)
htf_timeframe = input.timeframe("5", title="Higher Timeframe", group=g6)

g7 = "═══ Time-Based Filter ═══"
use_time_filter = input.bool(false, title="Use Time Filter", group=g7)
start_hour = input.int(8, title="Start Hour (24h format)", minval=0, maxval=23, group=g7)
end_hour = input.int(17, title="End Hour (24h format)", minval=0, maxval=23, group=g7)

// ==================== GLOBAL VARIABLES ====================
var float current_fib_high_val = na
var float current_fib_low_val = na
var int current_fib_high_bar_idx = na
var int current_fib_low_bar_idx = na
var bool is_current_fib_downtrend = na

var float actual_fib_1 = na
var float actual_fib_2 = na
var float actual_fib_3 = na
var float actual_fib_4 = na

var bool f1_long_triggered_this_fib = false
var bool f2_long_triggered_this_fib = false
var bool f3_long_triggered_this_fib = false
var bool f4_long_triggered_this_fib = false
var bool f1_short_triggered_this_fib = false
var bool f2_short_triggered_this_fib = false
var bool f3_short_triggered_this_fib = false
var bool f4_short_triggered_this_fib = false

var label high_label_id = na
var label low_label_id = na
var line high_marker_line_id = na
var line low_marker_line_id = na

// Variables for limit orders
var string pending_f1_long_id = ""
var string pending_f2_long_id = ""
var string pending_f3_long_id = ""
var string pending_f4_long_id = ""
var string pending_f1_short_id = ""
var string pending_f2_short_id = ""
var string pending_f3_short_id = ""
var string pending_f4_short_id = ""

// ==================== HELPER FUNCTIONS ====================
get_line_style(style_str) =>
    style = line.style_solid
    if style_str == "Dashed"
        style := line.style_dashed
    else if style_str == "Dotted"
        style := line.style_dotted
    style

get_ma(src, length, ma_type) =>
    result = switch ma_type
        "SMA" => ta.sma(src, length)
        "EMA" => ta.ema(src, length)
        "WMA" => ta.wma(src, length)
        => ta.ema(src, length)
    result

has_open_long_positions() =>
    result = false
    if strategy.opentrades > 0
        for i = 0 to strategy.opentrades - 1
            if strategy.opentrades.size(i) > 0
                result := true
                break
    result

has_open_short_positions() =>
    result = false
    if strategy.opentrades > 0
        for i = 0 to strategy.opentrades - 1
            if strategy.opentrades.size(i) < 0
                result := true
                break
    result

// ==================== MARKET STATUS DETECTION ====================
// Calculate ADX
[adx_val, plus_di_val, minus_di_val] = ta.dmi(adx_length, adx_length)
adx = adx_val
plus_di = plus_di_val
minus_di = minus_di_val

// Get higher timeframe data
htf_high = request.security(syminfo.tickerid, market_tf, high)
htf_low = request.security(syminfo.tickerid, market_tf, low)
htf_close = request.security(syminfo.tickerid, market_tf, close)

// Calculate MAs on higher timeframe
htf_ma_fast = request.security(syminfo.tickerid, market_tf, ta.ema(close, ma_fast))
htf_ma_medium = request.security(syminfo.tickerid, market_tf, ta.ema(close, ma_medium))
htf_ma_slow = request.security(syminfo.tickerid, market_tf, ta.ema(close, ma_slow))

// Calculate Bollinger Bands on higher timeframe
htf_bb_basis = request.security(syminfo.tickerid, market_tf, ta.sma(close, bb_length))
htf_bb_dev = request.security(syminfo.tickerid, market_tf, bb_mult * ta.stdev(close, bb_length))
htf_bb_upper = htf_bb_basis + htf_bb_dev
htf_bb_lower = htf_bb_basis - htf_bb_dev
htf_bb_width = htf_bb_upper - htf_bb_lower
htf_atr = request.security(syminfo.tickerid, market_tf, ta.atr(14))

// Market Status Logic
is_ma_aligned_up = htf_ma_fast > htf_ma_medium and htf_ma_medium > htf_ma_slow
is_ma_aligned_down = htf_ma_fast < htf_ma_medium and htf_ma_medium < htf_ma_slow
is_strong_trend = adx > adx_trend_threshold

// Calculate price position relative to MAs
price_above_all_ma = htf_close > htf_ma_fast and htf_close > htf_ma_medium and htf_close > htf_ma_slow
price_below_all_ma = htf_close < htf_ma_fast and htf_close < htf_ma_medium and htf_close < htf_ma_slow

// Sideways detection
is_narrow_bb = htf_bb_width < htf_atr * atr_mult_sideways
is_ma_flat = math.abs(htf_ma_fast - htf_ma_medium) / htf_ma_medium < 0.01

// Final market status determination
market_is_uptrend = is_ma_aligned_up and is_strong_trend and price_above_all_ma and plus_di > minus_di
market_is_downtrend = is_ma_aligned_down and is_strong_trend and price_below_all_ma and minus_di > plus_di
market_is_sideways = not market_is_uptrend and not market_is_downtrend and (is_narrow_bb or is_ma_flat or adx < 20)

// Trading permissions based on market status
can_long_market_status = true
can_short_market_status = true

if use_market_status
    if market_is_uptrend
        can_long_market_status := allow_long_uptrend
        can_short_market_status := false
    else if market_is_downtrend
        can_long_market_status := false
        can_short_market_status := allow_short_downtrend
    else if market_is_sideways
        can_long_market_status := allow_trades_sideways
        can_short_market_status := allow_trades_sideways

// Market status label
market_status_text = market_is_uptrend ? "UPTREND" : market_is_downtrend ? "DOWNTREND" : "SIDEWAYS"
market_status_color = market_is_uptrend ? color.green : market_is_downtrend ? color.red : color.orange

// ==================== WIN RATE ENHANCEMENT CALCULATIONS ====================
// Trend Filter
trend_ma = get_ma(close, trend_ma_length, trend_ma_type)
is_uptrend = close > trend_ma
is_downtrend = close < trend_ma

// RSI Filter
rsi = ta.rsi(close, rsi_length)
rsi_bullish = rsi < rsi_oversold
rsi_bearish = rsi > rsi_overbought

// Volume Filter
volume_ma = ta.sma(volume, volume_ma_length)
high_volume = volume > volume_ma * volume_multiplier

// ATR Volatility Filter
atr = ta.atr(atr_length)
sufficient_volatility = atr > ta.sma(atr, atr_length) * min_atr_multiplier

// Support/Resistance Filter
highest_sr = ta.highest(high, sr_lookback)
lowest_sr = ta.lowest(low, sr_lookback)
near_support = math.abs(close - lowest_sr) / close < sr_threshold
near_resistance = math.abs(close - highest_sr) / close < sr_threshold

// Higher Timeframe Filter
htf_trend_ma = request.security(syminfo.tickerid, htf_timeframe, get_ma(close, trend_ma_length, trend_ma_type))
htf_bullish = close > htf_trend_ma
htf_bearish = close < htf_trend_ma

// Time Filter
current_hour = hour(time)
in_trading_hours = current_hour >= start_hour and current_hour <= end_hour

// ==================== COMBINED FILTER CONDITIONS ====================
long_filter_passed = true
short_filter_passed = true

// Apply each filter if enabled
if use_trend_filter
    long_filter_passed := long_filter_passed and is_uptrend
    short_filter_passed := short_filter_passed and is_downtrend

if use_rsi_filter
    long_filter_passed := long_filter_passed and rsi_bullish
    short_filter_passed := short_filter_passed and rsi_bearish

if use_volume_filter
    long_filter_passed := long_filter_passed and high_volume
    short_filter_passed := short_filter_passed and high_volume

if use_atr_filter
    long_filter_passed := long_filter_passed and sufficient_volatility
    short_filter_passed := short_filter_passed and sufficient_volatility

if use_sr_filter
    long_filter_passed := long_filter_passed and near_support
    short_filter_passed := short_filter_passed and near_resistance

if use_htf_filter
    long_filter_passed := long_filter_passed and htf_bullish
    short_filter_passed := short_filter_passed and htf_bearish

if use_time_filter
    long_filter_passed := long_filter_passed and in_trading_hours
    short_filter_passed := short_filter_passed and in_trading_hours

// Add market status to filter conditions
long_filter_passed := long_filter_passed and can_long_market_status
short_filter_passed := short_filter_passed and can_short_market_status

// ==================== ORIGINAL FIBONACCI LOGIC ====================
var string hl_actual_line_style = get_line_style(hl_line_style_str)
if (hl_line_style_str != hl_line_style_str[1])
    hl_actual_line_style := get_line_style(hl_line_style_str)

high_bar_offset = ta.highestbars(high, lookback)
low_bar_offset = ta.lowestbars(low, lookback)

float potential_new_high_val = high[0 - high_bar_offset]
float potential_new_low_val = low[0 - low_bar_offset]
int potential_new_high_bar_idx = bar_index + high_bar_offset
int potential_new_low_bar_idx = bar_index + low_bar_offset

bool fib_points_changed = na(current_fib_high_val) or na(current_fib_low_val) or potential_new_high_val != current_fib_high_val or potential_new_low_val != current_fib_low_val or potential_new_high_bar_idx != current_fib_high_bar_idx or potential_new_low_bar_idx != current_fib_low_bar_idx

if fib_points_changed and barstate.isconfirmed
    // Cancel all pending orders when Fibonacci levels change
    if use_limit_orders
        strategy.cancel(pending_f1_long_id)
        strategy.cancel(pending_f2_long_id)
        strategy.cancel(pending_f3_long_id)
        strategy.cancel(pending_f4_long_id)
        strategy.cancel(pending_f1_short_id)
        strategy.cancel(pending_f2_short_id)
        strategy.cancel(pending_f3_short_id)
        strategy.cancel(pending_f4_short_id)
    
    current_fib_high_val := potential_new_high_val
    current_fib_low_val := potential_new_low_val
    current_fib_high_bar_idx := potential_new_high_bar_idx
    current_fib_low_bar_idx := potential_new_low_bar_idx
    is_current_fib_downtrend := current_fib_low_bar_idx > current_fib_high_bar_idx

    fib_range = current_fib_high_val - current_fib_low_val
    if fib_range > 0
        if is_current_fib_downtrend
            actual_fib_1 := current_fib_low_val + fib_range * fib_level_1_val
            actual_fib_2 := current_fib_low_val + fib_range * fib_level_2_val
            actual_fib_3 := current_fib_low_val + fib_range * fib_level_3_val
            actual_fib_4 := current_fib_low_val + fib_range * fib_level_4_val
        else
            actual_fib_1 := current_fib_high_val - fib_range * fib_level_1_val
            actual_fib_2 := current_fib_high_val - fib_range * fib_level_2_val
            actual_fib_3 := current_fib_high_val - fib_range * fib_level_3_val
            actual_fib_4 := current_fib_high_val - fib_range * fib_level_4_val
    else
        actual_fib_1 := na
        actual_fib_2 := na
        actual_fib_3 := na
        actual_fib_4 := na

    f1_long_triggered_this_fib := false
    f2_long_triggered_this_fib := false
    f3_long_triggered_this_fib := false
    f4_long_triggered_this_fib := false
    f1_short_triggered_this_fib := false
    f2_short_triggered_this_fib := false
    f3_short_triggered_this_fib := false
    f4_short_triggered_this_fib := false

    if show_fib_labels
        label.delete(high_label_id)
        label.delete(low_label_id)
        high_label_id := label.new(x=current_fib_high_bar_idx, y=current_fib_high_val, text="High", color=color.new(color.blue, 0), style=label.style_label_down, textcolor=color.white, xloc=xloc.bar_index)
        low_label_id  := label.new(x=current_fib_low_bar_idx, y=current_fib_low_val, text="Low", color=color.new(color.red, 0), style=label.style_label_up, textcolor=color.white, xloc=xloc.bar_index)

    if paint_hl_lines
        line.delete(high_marker_line_id)
        line.delete(low_marker_line_id)
        if not na(current_fib_high_val) and not na(current_fib_high_bar_idx)
            high_marker_line_id := line.new(x1=current_fib_high_bar_idx, y1=current_fib_high_val, x2=current_fib_high_bar_idx, y2=current_fib_high_val, color=hl_line_color, style=hl_actual_line_style, width=1, extend=extend.right)
        if not na(current_fib_low_val) and not na(current_fib_low_bar_idx)
            low_marker_line_id := line.new(x1=current_fib_low_bar_idx, y1=current_fib_low_val, x2=current_fib_low_bar_idx, y2=current_fib_low_val, color=hl_line_color, style=hl_actual_line_style, width=1, extend=extend.right)

// Trend background with filter indication
bg_color = na(is_current_fib_downtrend) ? color.new(color.gray, 98) : is_current_fib_downtrend ? (short_filter_passed ? color.new(color.red, 90) : color.new(color.red, 98)) : (long_filter_passed ? color.new(color.green, 90) : color.new(color.green, 98))
bgcolor(bg_color, title="Trend Background with Filter Status")

// Plot Fibonacci levels
plot(actual_fib_1, color=color.blue, title="Fib 1", style=plot.style_linebr, display=display.all)
plot(actual_fib_2, color=color.green, title="Fib 2", style=plot.style_linebr, display=display.all)
plot(actual_fib_3, color=color.red, title="Fib 3", style=plot.style_linebr, display=display.all)
plot(actual_fib_4, color=color.new(color.purple, 30), title="Fib 4", style=plot.style_linebr, display=display.all)

// Plot trend MA
plot(use_trend_filter ? trend_ma : na, color=color.new(color.orange, 50), title="Trend MA", linewidth=1)

// ==================== ENHANCED TRADING LOGIC WITH LIMIT ORDERS ====================
calculated_qty = (strategy.equity * leverage) / close
qty_to_trade = close > 0 and strategy.equity > 0 ? math.abs(calculated_qty) : 0
can_trade = strategy.equity > 0 and qty_to_trade > 0.000000001

// Helper functions for TP/SL calculation
calculate_tp_sl_long(entry_price) =>
    tp = use_pips_tp_sl ? entry_price + tp_pips * syminfo.mintick : entry_price * (1 + tp_percent)
    sl = use_pips_tp_sl ? entry_price - sl_pips * syminfo.mintick : entry_price * (1 - sl_percent)
    [tp, sl]

calculate_tp_sl_short(entry_price) =>
    tp = use_pips_tp_sl ? entry_price - tp_pips * syminfo.mintick : entry_price * (1 - tp_percent)
    sl = use_pips_tp_sl ? entry_price + sl_pips * syminfo.mintick : entry_price * (1 + sl_percent)
    [tp, sl]

// SHORT ENTRIES
if is_current_fib_downtrend and not has_open_long_positions() and barstate.isconfirmed and not na(actual_fib_1) and can_trade and short_filter_passed
    if use_limit_orders
        // Place limit orders for short entries
        if use_fib_level_1 and not f1_short_triggered_this_fib
            limit_price = actual_fib_1 * (1 - limit_offset_percent)
            [tp, sl] = calculate_tp_sl_short(limit_price)
            pending_f1_short_id := "Short F1 Limit " + str.tostring(bar_index)
            strategy.order(pending_f1_short_id, strategy.short, qty=qty_to_trade, limit=limit_price)
            f1_short_triggered_this_fib := true
            
        if use_fib_level_2 and not f2_short_triggered_this_fib
            limit_price = actual_fib_2 * (1 - limit_offset_percent)
            [tp, sl] = calculate_tp_sl_short(limit_price)
            pending_f2_short_id := "Short F2 Limit " + str.tostring(bar_index)
            strategy.order(pending_f2_short_id, strategy.short, qty=qty_to_trade, limit=limit_price)
            f2_short_triggered_this_fib := true
            
        if use_fib_level_3 and not f3_short_triggered_this_fib
            limit_price = actual_fib_3 * (1 - limit_offset_percent)
            [tp, sl] = calculate_tp_sl_short(limit_price)
            pending_f3_short_id := "Short F3 Limit " + str.tostring(bar_index)
            strategy.order(pending_f3_short_id, strategy.short, qty=qty_to_trade, limit=limit_price)
            f3_short_triggered_this_fib := true
            
        if use_fib_level_4 and not f4_short_triggered_this_fib
            limit_price = actual_fib_4 * (1 - limit_offset_percent)
            [tp, sl] = calculate_tp_sl_short(limit_price)
            pending_f4_short_id := "Short F4 Limit " + str.tostring(bar_index)
            strategy.order(pending_f4_short_id, strategy.short, qty=qty_to_trade, limit=limit_price)
            f4_short_triggered_this_fib := true
    else
        // Original market order logic
        if use_fib_level_1 and ta.crossover(close, actual_fib_1) and not f1_short_triggered_this_fib
            strategy.order("Short F1", strategy.short, qty=qty_to_trade)
            f1_short_triggered_this_fib := true
        if use_fib_level_2 and ta.crossover(close, actual_fib_2) and not f2_short_triggered_this_fib
            strategy.order("Short F2", strategy.short, qty=qty_to_trade)
            f2_short_triggered_this_fib := true
        if use_fib_level_3 and ta.crossover(close, actual_fib_3) and not f3_short_triggered_this_fib
            strategy.order("Short F3", strategy.short, qty=qty_to_trade)
            f3_short_triggered_this_fib := true
        if use_fib_level_4 and ta.crossover(close, actual_fib_4) and not f4_short_triggered_this_fib
            strategy.order("Short F4", strategy.short, qty=qty_to_trade)
            f4_short_triggered_this_fib := true

// LONG ENTRIES
if not is_current_fib_downtrend and not has_open_short_positions() and barstate.isconfirmed and not na(actual_fib_1) and can_trade and long_filter_passed
    if use_limit_orders
        // Place limit orders for long entries
        if use_fib_level_1 and not f1_long_triggered_this_fib
            limit_price = actual_fib_1 * (1 + limit_offset_percent)
            [tp, sl] = calculate_tp_sl_long(limit_price)
            pending_f1_long_id := "Long F1 Limit " + str.tostring(bar_index)
            strategy.order(pending_f1_long_id, strategy.long, qty=qty_to_trade, limit=limit_price)
            f1_long_triggered_this_fib := true
            
        if use_fib_level_2 and not f2_long_triggered_this_fib
            limit_price = actual_fib_2 * (1 + limit_offset_percent)
            [tp, sl] = calculate_tp_sl_long(limit_price)
            pending_f2_long_id := "Long F2 Limit " + str.tostring(bar_index)
            strategy.order(pending_f2_long_id, strategy.long, qty=qty_to_trade, limit=limit_price)
            f2_long_triggered_this_fib := true
            
        if use_fib_level_3 and not f3_long_triggered_this_fib
            limit_price = actual_fib_3 * (1 + limit_offset_percent)
            [tp, sl] = calculate_tp_sl_long(limit_price)
            pending_f3_long_id := "Long F3 Limit " + str.tostring(bar_index)
            strategy.order(pending_f3_long_id, strategy.long, qty=qty_to_trade, limit=limit_price)
            f3_long_triggered_this_fib := true
            
        if use_fib_level_4 and not f4_long_triggered_this_fib
            limit_price = actual_fib_4 * (1 + limit_offset_percent)
            [tp, sl] = calculate_tp_sl_long(limit_price)
            pending_f4_long_id := "Long F4 Limit " + str.tostring(bar_index)
            strategy.order(pending_f4_long_id, strategy.long, qty=qty_to_trade, limit=limit_price)
            f4_long_triggered_this_fib := true
    else
        // Original market order logic
        if use_fib_level_1 and ta.crossunder(close, actual_fib_1) and not f1_long_triggered_this_fib
            strategy.order("Long F1", strategy.long, qty=qty_to_trade)
            f1_long_triggered_this_fib := true
        if use_fib_level_2 and ta.crossunder(close, actual_fib_2) and not f2_long_triggered_this_fib
            strategy.order("Long F2", strategy.long, qty=qty_to_trade)
            f2_long_triggered_this_fib := true
        if use_fib_level_3 and ta.crossunder(close, actual_fib_3) and not f3_long_triggered_this_fib
            strategy.order("Long F3", strategy.long, qty=qty_to_trade)
            f3_long_triggered_this_fib := true
        if use_fib_level_4 and ta.crossunder(close, actual_fib_4) and not f4_long_triggered_this_fib
            strategy.order("Long F4", strategy.long, qty=qty_to_trade)
            f4_long_triggered_this_fib := true

// ==================== EXIT LOGIC ====================
var float tp_level_long = na
var float sl_level_long = na
var float tp_level_short = na
var float sl_level_short = na

if strategy.position_size > 0
    entry_price = strategy.position_avg_price
    if use_pips_tp_sl
        tp_level_long := entry_price + tp_pips * syminfo.mintick
        sl_level_long := entry_price - sl_pips * syminfo.mintick
    else
        tp_level_long := entry_price * (1 + tp_percent)
        sl_level_long := entry_price * (1 - sl_percent)
    strategy.exit("Exit Long", limit=tp_level_long, stop=sl_level_long)
    tp_level_short := na
    sl_level_short := na
else if strategy.position_size < 0
    entry_price = strategy.position_avg_price
    if use_pips_tp_sl
        tp_level_short := entry_price - tp_pips * syminfo.mintick
        sl_level_short := entry_price + sl_pips * syminfo.mintick
    else
        tp_level_short := entry_price * (1 - tp_percent)
        sl_level_short := entry_price * (1 + sl_percent)
    strategy.exit("Exit Short", limit=tp_level_short, stop=sl_level_short)
    tp_level_long := na
    sl_level_long := na
else
    tp_level_long := na
    sl_level_long := na
    tp_level_short := na
    sl_level_short := na

// Plot TP/SL levels
plot(tp_level_long, color=color.new(color.green, 0), title="TP Long", style=plot.style_linebr, display=show_markers ? display.all : display.none)
plot(sl_level_long, color=color.new(color.red, 0), title="SL Long", style=plot.style_linebr, display=show_markers ? display.all : display.none)
plot(tp_level_short, color=color.new(color.green, 0), title="TP Short", style=plot.style_linebr, display=show_markers ? display.all : display.none)
plot(sl_level_short, color=color.new(color.red, 0), title="SL Short", style=plot.style_linebr, display=show_markers ? display.all : display.none)

// ==================== EXIT MARKERS ====================
if show_markers and strategy.closedtrades > 0
    var last_exit_bar = 0
    var float last_exit_price = 0.0

    if strategy.closedtrades > strategy.closedtrades[1] and (bar_index != last_exit_bar or close != last_exit_price) 
        last_exit_bar := bar_index
        last_exit_price := close 

        last_trade_is_long_exit = strategy.closedtrades.size(strategy.closedtrades - 1) > 0 
        last_trade_is_short_exit = strategy.closedtrades.size(strategy.closedtrades - 1) < 0

        if last_trade_is_long_exit 
            if not na(tp_level_long[1]) and close >= tp_level_long[1] 
                label.new(bar_index, low - syminfo.mintick * 10, text="TP Long", color=color.new(color.green, 0), style=label.style_label_up, textcolor=color.white)
            else if not na(sl_level_long[1]) and close <= sl_level_long[1] 
                label.new(bar_index, high + syminfo.mintick * 10, text="SL Long", color=color.new(color.red, 0), style=label.style_label_down, textcolor=color.white)
        else if last_trade_is_short_exit 
            if not na(tp_level_short[1]) and close <= tp_level_short[1] 
                label.new(bar_index, low - syminfo.mintick * 10, text="TP Short", color=color.new(color.green, 0), style=label.style_label_up, textcolor=color.white)
            else if not na(sl_level_short[1]) and close >= sl_level_short[1] 
                label.new(bar_index, high + syminfo.mintick * 10, text="SL Short", color=color.new(color.red, 0), style=label.style_label_down, textcolor=color.white)

// ==================== MARKET STATUS DISPLAY ====================
var label market_status_label = na
if barstate.islast
    label.delete(market_status_label)
    if use_market_status
        market_status_label := label.new(x=bar_index + 5, y=high[0], text=market_status_text + " (" + market_tf + ")", color=market_status_color, style=label.style_label_left, textcolor=color.white, size=size.normal)

// ==================== ENHANCED FILTER STATUS TABLE ====================
if barstate.islast
    var table filter_table = table.new(position.top_right, 2, 10, bgcolor=color.new(color.white, 80), border_width=1)
    
    // Headers
    table.cell(filter_table, 0, 0, "Filter", text_color=color.black, text_size=size.small)
    table.cell(filter_table, 1, 0, "Status", text_color=color.black, text_size=size.small)
    
    // Market Status
    table.cell(filter_table, 0, 1, "Market", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 1, use_market_status ? market_status_text : "OFF", text_color=use_market_status ? market_status_color : color.gray, text_size=size.tiny)
    
    // Order Type
    table.cell(filter_table, 0, 2, "Orders", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 2, use_limit_orders ? "LIMIT" : "MARKET", text_color=use_limit_orders ? color.blue : color.orange, text_size=size.tiny)
    
    // Trend Filter
    table.cell(filter_table, 0, 3, "Trend", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 3, use_trend_filter ? (is_uptrend ? "↑" : "↓") : "OFF", text_color=use_trend_filter ? (is_uptrend ? color.green : color.red) : color.gray, text_size=size.tiny)
    
    // RSI Filter
    table.cell(filter_table, 0, 4, "RSI", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 4, use_rsi_filter ? str.tostring(math.round(rsi)) : "OFF", text_color=use_rsi_filter ? (rsi_bullish or rsi_bearish ? color.green : color.orange) : color.gray, text_size=size.tiny)
    
    // Volume Filter
    table.cell(filter_table, 0, 5, "Volume", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 5, use_volume_filter ? (high_volume ? "✓" : "✗") : "OFF", text_color=use_volume_filter ? (high_volume ? color.green : color.red) : color.gray, text_size=size.tiny)
    
    // ATR Filter
    table.cell(filter_table, 0, 6, "ATR", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 6, use_atr_filter ? (sufficient_volatility ? "✓" : "✗") : "OFF", text_color=use_atr_filter ? (sufficient_volatility ? color.green : color.red) : color.gray, text_size=size.tiny)
    
    // S/R Filter
    table.cell(filter_table, 0, 7, "S/R", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 7, use_sr_filter ? (near_support or near_resistance ? "✓" : "✗") : "OFF", text_color=use_sr_filter ? (near_support or near_resistance ? color.green : color.red) : color.gray, text_size=size.tiny)
    
    // HTF Filter
    table.cell(filter_table, 0, 8, "HTF", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 8, use_htf_filter ? (htf_bullish ? "↑" : "↓") : "OFF", text_color=use_htf_filter ? (htf_bullish ? color.green : color.red) : color.gray, text_size=size.tiny)
    
    // Time Filter
    table.cell(filter_table, 0, 9, "Time", text_color=color.black, text_size=size.tiny)
    table.cell(filter_table, 1, 9, use_time_filter ? (in_trading_hours ? "✓" : "✗") : "OFF", text_color=use_time_filter ? (in_trading_hours ? color.green : color.red) : color.gray, text_size=size.tiny)